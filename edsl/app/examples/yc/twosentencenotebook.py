# -*- coding: utf-8 -*-
"""TwoSentenceNotebook.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EF-dKJ5TwI0VF8hqRNI06BdqhyzTECkm
"""

# ! uv pip install edsl -q

from edsl import Survey, QuestionFreeText

q_name = QuestionFreeText(question_text = "What is your startup's name?",
                          question_name = "startup_name")
q_do = QuestionFreeText(question_name = "startup_does",
                     question_text = "What does your startup do?")


q_traction = QuestionFreeText(question_name = "traction",
                     question_text = "What does your startup do?")


q_bio = QuestionFreeText(question_name = "bio",
                         question_text = "Tell me your bio"
)
s = Survey([q_do, q_traction, q_bio])

from edsl import Scenario
answers = {
    'startup_name': "Expected Parrot",
    'startup_does': """Builds open-source tools for using AI for generating AI personas that users can then
user to exploring scenarios. There is a Python library, EDSL, where users can specify Agents, Scenarios and Survey Questions.
It works with lots of different models.
Customers have used it for pricing, and scenario planning. They ask questions that are otherwise hard to ask regular customers.
They are mostly simulating their customers and running experiments on those digital twins.
Academics are seeing if they can replicate existing social science experiments.
Some customers are using it as a kind of data labeling tool, using features like piping and skip-logic to ask follow-up questions based on answers.
""",
           'traction':"Fast growing usage among academics; $120K in enterprise contracts",
           'bio': "Ex-Uber; MIT Professor who pioneered this approach."
           }
scenario = Scenario(answers)

from edsl import Agent
a = Agent(traits = {
    'persona': """
You are a seasoned parter at Y Combinator very skilled at helping startups
come up with a 2 sentence description.

<important>
First sentence is what the startup does.
Second sentence is impressive traction or background of founders
</important>

A few key points:
- These 2 sentences are for investors, peers and press, not end users.
- It should invite further questions
- Don't lead with the problem
- All else equal, shorter is better
- Sharp and crisp.
- Every non-essential word hurts.
- Think movie trailer.

If traction is impressive, lead with that.
- Real revenue
- Booked LOIs
- Growth

Traction Examples
- "Over $100K in ARR"
- Contracts signed with Cedar-Sinai Medical center
- Sharp and short

If bio is impressive and important, that can be a good second sentence:
- Serial entrepreneur with 2 exits
- Founding engineer at Uber
- PhD from Stanford in molecular biology

Things that get investors excited:
- Signs there is a large market
- Great founder-market fit
- Signals of traction"""

})

from edsl import QuestionList

q = QuestionList(question_name = "two_sentences",
                 question_text = """Based on this information:

                 Name: {{ scenario.startup_name }},
                 What they do: {{ scenario.startup_does}},
                 Traction: {{ scenario.traction }},
                 Founder bio: {{ scenario.bio }}

                 Come up with at least 10 candidate variations for the YC 2 sentence description.
                 It is fine to omit aspects of the startup that you know - it's meant to be a short pitch.
                 Variations should be very different from each other, taking different approaches and highlighting
                 different aspects of the startup.
                  """)

results = q.by(scenario).by(a).run(progress_bar = False)

results.select('answer.*').to_scenario_list().expand('two_sentences').table()

#from edsl import login
#login()

candidates = results.select('answer.*').to_scenario_list().expand('two_sentences').select('two_sentences').to_scenario_list()

candidates

from edsl import QuestionFreeText
q = QuestionFreeText(question_name = "shorten",
                     question_text = "Please make this even more concise and sharper, aiming for 1/2 the length: {{ scenario.two_sentences }}")

new_results = q.by(candidates).by(a).run(progress_bar = False)

new_results.select('two_sentences', 'answer.*').table()

pithy_list = new_results.select('answer.shorten').rename({'answer.shorten': 'two_sentences'}).to_scenario_list()

pithy_list

from edsl import QuestionLinearScale
investor_agent = Agent(traits = {'persona': "You are a VC attending demo day."})

q_invest = QuestionLinearScale(
    question_name = "invest",
    question_text = """How intersted are you in this company: {{ scenario.two_sentences}}?""",
    question_options = [1,2,3,4,5],
    option_labels = {1: "Not interested", 3: "Interesting, but but have reservations", 5: "Sounds interesting and exciting!"}
)
invest_results = q_invest.by(pithy_list).by(investor_agent).run()

invest_results.select('scenario.*', 'answer.*', "comment.*")

